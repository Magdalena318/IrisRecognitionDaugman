/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IrisRecognitionDaugman;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author root
 */
public class main_frame extends javax.swing.JFrame {

    image im;
    /**
     * Creates new form main_frame
     */
    public main_frame() {
        initComponents();
        this.setTitle("Iris detection by J.Daugman's algorithm");
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jButton8.setBackground(new java.awt.Color(255, 51, 0));
        jButton8.setText("Cross validation");
        jButton8.setMaximumSize(new java.awt.Dimension(100, 23));
        jButton8.setMinimumSize(new java.awt.Dimension(100, 23));
        jButton8.setOpaque(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cross_validation(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 51, 0));
        jButton7.setText("Code logging");
        jButton7.setOpaque(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Iris_logging(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 51, 0));
        jButton4.setText("Open");
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Open_Click(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 51, 0));
        jButton5.setText("Save");
        jButton5.setOpaque(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_Click(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 51, 0));
        jButton3.setText("Iris detection");
        jButton3.setOpaque(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Iris_detection(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Result");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton5)
                                .addComponent(jButton4)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(4, 4, 4)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Open file");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Open_Click(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Save file");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_Click(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem3.setText("Grayscale");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Grayscale(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Histogram normalization");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Histogram_normalization(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Gaussian filter");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Gaussian_filter(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Iris recognition");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Iris_detection(evt);
            }
        });

        jMenuItem6.setText("Iris detection");
        jMenu3.add(jMenuItem6);

        jMenuItem7.setText("Iris code logging");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Iris_logging(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("Cross validation");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cross_validation(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Grayscale(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Grayscale
        im.grayscale();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Grayscale

    private void Histogram_normalization(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Histogram_normalization
        im.histogram_normalization();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Histogram_normalization

    private void Iris_detection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Iris_detection
        image iris = im.iris_detection();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
        jLabel2.setIcon(new ImageIcon(iris.Resize(jLabel2.getWidth(), jLabel2.getHeight())));
        
        //Chunked encoding
        ArrayList<Integer> features = iris.chunked_encoding();
        System.out.println(features.toString());
        
        
        //Haming distance
       // int dist = HammingDistance();
    }//GEN-LAST:event_Iris_detection

    private void Open_Click(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Open_Click
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setPreferredSize(new Dimension(500, 400));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg", "bmp"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                if(jLabel1.getIcon() != null) jLabel1.setIcon(null);
                im = new image(file);
                jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
            } catch (IOException ex) {
                System.out.println("Problem accessing file"+file.getAbsolutePath());
            }
            } else {
                System.out.println("File access cancelled by user.");
            }
    }//GEN-LAST:event_Open_Click

    private void Save_Click(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_Click
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setPreferredSize(new Dimension(500, 400));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg", "bmp"));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.exists()) {
                try {
                    file.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(main_frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            BufferedImage img = (BufferedImage)((Image)((ImageIcon)jLabel1.getIcon()).getImage());
            
            try {
                ImageIO.write(img, "jpg", file);
            } catch (IOException ex) {
                Logger.getLogger(main_frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }    
    }//GEN-LAST:event_Save_Click

    private void Gaussian_filter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Gaussian_filter
        im.gaussian_filter();
        jLabel1.setIcon(new ImageIcon(im.Resize(jLabel1.getWidth(), jLabel1.getHeight())));
    }//GEN-LAST:event_Gaussian_filter

    private void Iris_logging(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Iris_logging
        //session 1
        String path = "ubiris/UBIRIS_200_150_R/";
        File log = new File(path + "out.txt");
        FileWriter fw;
        try {
            fw = new FileWriter(log);
            
            //Person count
            int person_count = 8;
            
            //Image count
            int image_count = 4;
            
            for(int i = 1; i <= person_count; i++){
                for(int j = 1; j <= image_count; j++){
                    File file = new File("ubiris/UBIRIS_200_150_R/Sessao_1/" + String.valueOf(i) + "/Img_" + String.valueOf(i) + "_1_" + String.valueOf(j) + ".jpg");
                    try {
                            im = new image(file);
                        } catch (IOException ex) {
                            System.out.println("Problem accessing file"+file.getAbsolutePath());
                            break;
                    }

                    image iris = im.iris_detection();

                    //Chunked encoding
                    ArrayList<Integer> features = iris.chunked_encoding();
                    //System.out.println(features.toString());


                    fw.append("1;" + String.valueOf(i) + ";" + String.valueOf(j) + ";" + features.toString() + "\n");                 

                }
            }
            for(int i = 1; i <= person_count; i++){
                for(int j = 1; j <= image_count; j++){
                    File file = new File("ubiris/UBIRIS_200_150_R/Sessao_2/" + String.valueOf(i) + "/Img_" + String.valueOf(i) + "_2_" + String.valueOf(j) + ".jpg");
                    try {
                            im = new image(file);
                        } catch (IOException ex) {
                            System.out.println("Problem accessing file"+file.getAbsolutePath());
                            break;
                    }

                    image iris = im.iris_detection();

                    //Chunked encoding
                    ArrayList<Integer> features = iris.chunked_encoding();
                    //System.out.println(features.toString());


                    fw.append("2;" + String.valueOf(i) + ";" + String.valueOf(j) + ";" + features.toString() + "\n");                 

                }
            }
            fw.close();
        } catch (IOException ex) {
            Logger.getLogger(main_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_Iris_logging

    private static HashMap sortByValues(HashMap map) { 
        LinkedList list = new LinkedList(map.entrySet());
        // Defined Custom Comparator here
        Collections.sort(list, new Comparator() {
             public int compare(Object o1, Object o2) {
                return ((Comparable) ((Map.Entry) (o1)).getValue())
                   .compareTo(((Map.Entry) (o2)).getValue());
             }
        });

        // Here I am copying the sorted list in HashMap
        // using LinkedHashMap to preserve the insertion order
        HashMap sortedHashMap = new LinkedHashMap();
        for (Iterator it = list.iterator(); it.hasNext();) {
               Map.Entry entry = (Map.Entry) it.next();
               sortedHashMap.put(entry.getKey(), entry.getValue());
        } 
        return sortedHashMap;
    }
    
    private void Cross_validation(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cross_validation
        double success = 0;
        int step = 0;
        ArrayList<iris_code> test = new ArrayList<>();
        ArrayList<iris_code> train = new ArrayList<>();
        
        int person_count = 8;
        String m = (String)JOptionPane.showInputDialog(
            this, "Enter which part do you want to test (from 0 to " + (person_count - 1) + ")\n", "Input mod", JOptionPane.PLAIN_MESSAGE, null, null, "");
        int mod = Integer.parseInt(m);
        
        //extracting datasets from log file
        String path = "ubiris/UBIRIS_200_150_R/";
        File log = new File(path + "out.txt");
        FileReader fr;
        try {
            fr = new FileReader(log);
            BufferedReader br = new BufferedReader(fr);
            String line = null;
            int i = 0;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(";");
                String replace = data[3].replace("[", "");
                replace = replace.replace("]", "");
                replace = replace.replace(" ", "");
                //data = replace.split(",");
                ArrayList<String> binary_string = new ArrayList<String>(Arrays.asList(replace.split(",")));
                ArrayList<Integer> code = new ArrayList<Integer>();
                
                for(int b = 0; b < binary_string.size(); b++){
                    code.add(Integer.parseInt(binary_string.get(b)));
                }
                

                //System.out.println(replace);
                int id = Integer.parseInt(data[0]) * 1000 + Integer.parseInt(data[1]) * 100 + Integer.parseInt(data[2]);
                iris_code tmp = new iris_code(id, Integer.parseInt(data[0]), Integer.parseInt(data[1]), Integer.parseInt(data[2]), code);
                if(i % person_count == mod){
                    test.add(tmp);
                } else {
                    train.add(tmp);
                }
                //System.out.println("Test size " + id);
                //System.out.println("Train size " + train.size());
                i++;
            }
            br.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main_frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(main_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //calculating distances
        for(int i = 0; i < test.size(); i++){
            System.out.println("Test number " + test.get(i).id);
            HashMap<Integer, Integer> dist = new HashMap<>();
            for(int j = 0; j < train.size(); j++){                
                int d = Hamming(test.get(i).code, train.get(j).code);
                dist.put(train.get(j).id, d);
            }
           
            //sorting distances for each test image
            Map<Integer, Integer> map = sortByValues(dist); 
            Set set2 = map.entrySet();
            Iterator iterator1 = set2.iterator();
            while(iterator1.hasNext()) {
                 Map.Entry me = (Map.Entry)iterator1.next();
                 int ses_mod = (int) me.getKey() % 1000;
                 int person_mod = ses_mod % 100;
                 int max = (ses_mod - person_mod) / 100;
                 System.out.print(max + ": ");
                 System.out.println(me.getValue());
            }
            
            int count = 0;
            int k = 3; //kNN parameter
            int[][] top = new int[k][];
            for (int c = 0; c < k; c++)
            {
                top[c] = new int[2];
                top[c][0] = -1;
                top[c][1] = 0;
            }
            
            Iterator iterator2 = set2.iterator();
            while(iterator2.hasNext()) {
                 Map.Entry me = (Map.Entry)iterator2.next();                
            
                if (count > k-1) break;
                count++;

                for (int j = 0; j < k; j++)
                {
                    if (top[j][0] == (int) me.getKey())
                    {
                        top[j][1]++;
                        break;
                    }
                    if(top[j][0] == -1)
                    {
                        top[j][1]++;
                        top[j][0] = (int) me.getKey();
                         //System.out.println("me.id" + (int) me.getKey());
                        break;
                    } 
                }
            }
           
                    
            int maxC = -1;
            int maxId = -1;
            for(int c = 0; c < k; c++)
            {
                if (top[c][1] > maxC)
                {
                    maxC = top[c][1];
                    
                    int ses_mod = top[c][0] % 1000;
                    int person_mod = ses_mod % 100;
                    maxId = (ses_mod - person_mod) / 100;
                }
            }
            
            System.out.println("Current test:" + test.get(i).person);
            System.out.println("max id:" + maxId);
            
            if (test.get(i).person == maxId) success++;
        }
        double res = success / (double)test.size();
        System.out.println(res);
        jLabel3.setText(String.valueOf(res));
    }//GEN-LAST:event_Cross_validation

    private int Hamming(ArrayList<Integer> f1, ArrayList<Integer> f2){
            int dist = 0;
            for(int i=0;i<f1.size();i++)
            {
                if (!Objects.equals(f1.get(i), f2.get(i))) dist++;
            }
            return dist;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
